// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ObjectDatum
{
	float4x4	LocalToWorldMatrix;
	int			IndicesOffset;
	int			IndicesCount;
};

float4							_LightPosition;
float4							_LightForwardDir;
float4							_LightUpwardDir;
float							_InnerRange;
float							_OuterRange;
float							_SpotLightAngle;
float							_ShadowFocusDistance;
StructuredBuffer<ObjectDatum>	_ObjectData;
StructuredBuffer<float3>		_Vertices;
StructuredBuffer<int>			_Indices;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


struct LightRay
{
	float3 Direction;
	float3 Color;
	float3 Position;
};

LightRay CreateInitialLightRay(float2 uv, float halfSize, float4 lightRightwardDir)
{
	LightRay result;

	result.Color = float3(1.0, 1.0, 1.0);
	result.Position = _LightPosition.xyz;

	float3 hitPos = (uv.x * halfSize) * lightRightwardDir.xyz;
	hitPos += (uv.y * halfSize) * _LightUpwardDir.xyz;
	hitPos += _ShadowFocusDistance * _LightForwardDir.xyz;

	result.Direction = normalize(hitPos);

	return result;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width;
	uint height;

	Result.GetDimensions(width, height);

	float pixX = id.x;
	float pixY = id.y;

	float2 uv = float2(pixX / (width - 1), pixY / (height - 1));
	uv *= 2.0;
	uv -= 1.0;

	bool outOfBounds = dot(uv, uv) > 1.0;

	if (outOfBounds)
	{
		Result[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
		return;
	}

	float4	lightRightwardDir	= float4(cross(_LightUpwardDir.xyz, _LightForwardDir.xyz), 0.0);
	float	halfSize			= _ShadowFocusDistance * tan(_SpotLightAngle);

	LightRay lightRay = CreateInitialLightRay(uv, halfSize, lightRightwardDir);

	Result[id.xy] = float4(1.0, 1.0, 1.0, 1.0);
}
