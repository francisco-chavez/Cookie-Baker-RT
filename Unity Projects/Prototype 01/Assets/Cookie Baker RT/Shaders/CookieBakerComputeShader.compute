// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ObjectDatum
{
	float4x4	LocalToWorldMatrix;
	int			IndicesOffset;
	int			IndicesCount;
};

float4							_LightPosition;
float4							_LightForwardDir;
float4							_LightUpwardDir;
float							_InnerRange;
float							_OuterRange;
float							_SpotLightAngle;
StructuredBuffer<ObjectDatum>	_ObjectData;
StructuredBuffer<float3>		_Vertices;
StructuredBuffer<int>			_Indices;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

	uint width;
	uint height;

	Result.GetDimensions(width, height);

	float pixX = id.x;
	float pixY = id.y;

	float2 uv = float2(pixX / (width - 1), pixY / (height - 1));
	uv *= 2.0;
	uv -= 1.0;

	float inside = dot(uv, uv) <= 1.0 ? 1.0 : 0.0;

	Result[id.xy] = float4(inside, inside, inside, 1.0 - inside);
}
