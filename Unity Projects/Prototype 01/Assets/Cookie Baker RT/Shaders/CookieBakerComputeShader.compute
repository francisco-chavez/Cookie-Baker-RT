// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ObjectDatum
{
	float4x4	LocalToWorldMatrix;
	int			IndicesOffset;
	int			IndicesCount;
};

float4							_LightPosition;
float4							_LightForwardDir;
float4							_LightUpwardDir;
float							_InnerRange;
float							_OuterRange;
float							_SpotLightAngle;
float							_ShadowFocusDistance;
StructuredBuffer<ObjectDatum>	_ObjectData;
StructuredBuffer<float3>		_Vertices;
StructuredBuffer<int>			_Indices;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;


struct LightRay
{
	float3 Direction;
	float3 Color;
	float3 Position;
};

// Creates our inital light rays.
// uv: The uv position that the ray hits in the final texture result.
// halfSize: If we were to convert our resulting cookie texture to World-Space, this would be half its width (or height) at the given focus distance.
// lightRightwardDir: This is the light-source's Right Direction in World-Space. This value wasn't given to the shader, so it had to be computed.
LightRay CreateInitialLightRay(float2 uv, float halfSize, float4 lightRightwardDir)
{
	LightRay result;

	result.Color = float3(1.0, 1.0, 1.0);	// We will start with a pure white light, if the User wants to tint it, they can tint the actual light.
	result.Position = _LightPosition.xyz;	// Our starting position is the position of our light-source.

	// If we were to place our shadow texture in World-Space at the distance given by _ShadowFocusDistance, 
	// we want the offset vector that goes from our lightSource to our uv position. In other words, if we 
	// add this vector to our position, we will get a World-Space position that matches up to the given 
	// uv-position at the _ShadowFocusDistance.
	float3 hitPosOffset = (uv.x * halfSize) * lightRightwardDir.xyz;
	hitPosOffset += (uv.y * halfSize) * _LightUpwardDir.xyz;
	hitPosOffset += _ShadowFocusDistance * _LightForwardDir.xyz;

	// Normalize the offset we calculated into a direction vector.
	result.Direction = normalize(hitPosOffset);

	return result;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	uint width;
	uint height;

	Result.GetDimensions(width, height);

	float pixX = id.x;
	float pixY = id.y;

	float2 uv = float2(pixX / (width - 1), pixY / (height - 1));
	uv *= 2.0;
	uv -= 1.0;

	bool outOfBounds = dot(uv, uv) > 1.0;

	if (outOfBounds)
	{
		Result[id.xy] = float4(0.0, 0.0, 0.0, 0.0);
		return;
	}

	float4	lightRightwardDir	= float4(cross(_LightUpwardDir.xyz, _LightForwardDir.xyz), 0.0);
	float	halfSize			= _ShadowFocusDistance * tan(_SpotLightAngle);

	///
	/// Create inital LightRay for our Ray-Tracing.
	///
	LightRay lightRay = CreateInitialLightRay(uv, halfSize, lightRightwardDir);


	///*********************************************************************
	///
	/// Replace this comment block with Ray-Tracing code
	///
	///*********************************************************************


	// If the light is pointing away from cookie-texture, then it can not add to the texture.
	if (dot(lightRay.Direction, _LightForwardDir.xyz) <= 0.0)
		return;

	/// 
	/// Convert our lightRay into a point on the plane that our Cookie will cover in World-Space at a 
	/// distance of _ShadowFocusDistance from our light-source
	///

	// This is uv-point (0, 0) in our plane.
	float3 v0			= (_ShadowFocusDistance * _LightForwardDir + _LightPosition).xyz;

	// This is the LightRay's current starting point.
	float3 p0			= lightRay.Position;


	// This is the delta vector from our LightRay's starting point to plane's 0-point.
	float3 W			= p0 - v0;
	
	// Normal vector for our plain
	float3 N			= (-_LightForwardDir).xyz;


	// This is the scale factor by which we multiple our lightRay's direction in order to find the offset 
	// for the intersection point
	float s_i			= dot(-N, W) / dot(N, lightRay.Direction);

	// This is our intersection point with the plane.
	float3 lightPoint	= (s_i * lightRay.Direction) + p0;

	///
	/// Convert our lightPoint in World-Space into a uv-coord.
	///
	float3 planeCoord = lightPoint - v0;
	float uOffset = dot(planeCoord, lightRightwardDir.xyz);
	float vOffset = dot(planeCoord, _LightUpwardDir.xyz);
	float2 uvPrime = float2(uOffset, vOffset);
	uvPrime *= (1.0 / halfSize);

	// Check to see if we're even in the allowed texture area.
	if (dot(uvPrime, uvPrime) > 1.0)
		return;

	float2 pix = uvPrime + 1.0;
	pix *= (1.0 / 2.0);
	pix *= (width - 1.0);

	int2 pixInt = pix;

	Result[pixInt.xy] = float4(1.0, 1.0, 1.0, 1.0);
}
