// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FCT.CookieBakerRT.IPC_DataFormat
{

using global::System;
using global::FlatBuffers;

public struct WorkloadReceived : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static WorkloadReceived GetRootAsWorkloadReceived(ByteBuffer _bb) { return GetRootAsWorkloadReceived(_bb, new WorkloadReceived()); }
  public static WorkloadReceived GetRootAsWorkloadReceived(ByteBuffer _bb, WorkloadReceived obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorkloadReceived __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int WorkloadID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<FCT.CookieBakerRT.IPC_DataFormat.WorkloadReceived> CreateWorkloadReceived(FlatBufferBuilder builder,
      int WorkloadID = 0) {
    builder.StartTable(1);
    WorkloadReceived.AddWorkloadID(builder, WorkloadID);
    return WorkloadReceived.EndWorkloadReceived(builder);
  }

  public static void StartWorkloadReceived(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddWorkloadID(FlatBufferBuilder builder, int WorkloadID) { builder.AddInt(0, WorkloadID, 0); }
  public static Offset<FCT.CookieBakerRT.IPC_DataFormat.WorkloadReceived> EndWorkloadReceived(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<FCT.CookieBakerRT.IPC_DataFormat.WorkloadReceived>(o);
  }
};


}
